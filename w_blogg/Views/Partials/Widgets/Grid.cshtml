@inherits Umbraco.Web.Mvc.UmbracoViewPage<ContentModels.Grid>
@using ContentModels = Umbraco.Web.PublishedModels;
@using Igloo.Extensions
@using Umbraco.Web.Models
@{
    @*=====================
    # Grid Settings
    =====================*@

    var order = (int)ViewData["order"];

    var containerWidthClass = "container";
    switch (Model.ContainerWidth)
    {
        case "small":
            containerWidthClass = "container container--small";
            break;
        case "standard":
            containerWidthClass = "container";
            break;
        case "big":
            containerWidthClass = "container container--big";
            break;
        case "full width":
            containerWidthClass = "container-fluid";
            break;
    }

    var removeColumnGutterClass = Model.RemoveColumnGutter ? "row--flat" : "";
    var compactClass = Model.Compact ? "grid--compact" : "";
    
    var animateClass = Model.Animate ? "animate" : "";

    var textColorClass = Model.TextColor?.ToString() == "white" ? "light-color" : ""; 
    var backgroundColor = Model.BackgroundColor?.ToString();
    var backgroundColorClass = string.IsNullOrWhiteSpace(backgroundColor) ? "white-bg" : backgroundColor + "-bg";

    var backgroundMediaUrl = Model.BackgroundImage != null ? Model.BackgroundImage.Url : "";
    if (backgroundMediaUrl != "")
    {
        backgroundColorClass = "";
    }
}

@if (Model.Columns != null && Model.Columns.Any())
{
    <div class="block grid @(backgroundColorClass) @(textColorClass) @(removeColumnGutterClass) @(compactClass) @(animateClass)">
        <div class="@(containerWidthClass)">
            <div class="row @(removeColumnGutterClass) row--@(Model.HorizontalAlignColumns) row--v-@(Model.VerticalAlignColumns)">

                @foreach (var column in Model.Columns)
                {
                    var columnWidth = column.Value<string>("columnWidth")?.Replace("%", "") ?? "100";
                    var columnType = column.ContentType.Alias;

                    if (columnWidth == "25")
                    {
                        columnWidth = "25 col-m-50";
                    }
                    else if (columnWidth == "20")
                    {
                        columnWidth = "20 col-m-33";
                    }
                    else if(columnWidth == "10"){
                        columnWidth = "10 col-m-20";
                    }

                    <div class="col-@(columnWidth) col-s-100">
                        @if (columnType == "lineBreak"){
                            @Html.Partial("~/Views/Partials/Shared/LineBreak.cshtml", column)
                        } else {
                            @Html.Partial("~/Views/Partials/Widgets/Grid/"+columnType+".cshtml", column, new ViewDataDictionary { { "containerWidth", Model.ContainerWidth }, {"order", order} })
                        }
                    </div>
                }
            </div>
        </div>
        @if (backgroundMediaUrl != "")
        {
            <div class="block__background lazyload"
                 data-bgset="@(backgroundMediaUrl)?upscale=false&width=1280 1280w,
        		@(backgroundMediaUrl)?upscale=false&width=1600 1600w,
        		@(backgroundMediaUrl)?upscale=false&width=1920 1920w"
                 data-sizes="auto">
            </div>
        }
    </div>
}